複数のBE はk8sで本番環境を構築するのがいいと思うます。
k8sはcontainerを使って、dockerも一緒使われます。
Dockerを使う時は信頼できるImageを使うべきです。
信頼できないimageはbackdoorが入れられた可能性があります。
k8sを使うとサーバーの性能をアップダウンは簡単に操作できます。
備えのcontainerがあればサーバーダウンされる可能性も低くなります。
もしマイクルサービスのBEもあればk8s以内でアクセスの制限もできます。

もし静態のファイルが保存される時が必要な場合は、
今使えるcloud(OBS)が多く、ダウンロードリンクにtokenとダウンロードタイムも簡単に設定できます。
そしtokenとダウンロードタイムが必要じゃない場合はキャッシュできるようなサービス(CDN)も推奨です。
もしDomainはcloudflareを用いて、サーバーのIPをproxyにして隠されることもできます。

複数のBEに複数はマイクルサービスと思われます。
サーバーとサーバーのコミュニケーションはGRPC+Protobufで接続することも推奨です。
サーバーとクライアントを接続する時はHTTPSで利用して、クライアント(アプリ)側にCERT PINを要求して、
クライアントが編集されない場合はMITMできないので安全です。
サイトはCERT PINできないと思うので、HTTPSも不安全(MITM)とブラウザーもネットのREQとRESを簡単に見えるので、
暗号化されることは必要ですが、少なくともJWTを利用して、KEYはサーバー側で保存されます。
RSAされたAESキーを返却して復号化するとレスポンスヘダーにRSA SIGN VERIFYという改竄チェックは保護できると思いますが、
必ず守れることはないですが、技術も持っていない人に十分です。

デプロイについて、
GITのbranchを利用して、タスクのcommitをmergeして、テストして、GitHubのCI/CDと連携したら、mergeされたcommitをTagをつけて、そういう方法でデプロイするのはおすすめです。
デプロイを始めたら、
自動的にDOCKERで新しいcontainerを作って、そのcontinaterはBEの環境をインストールされます。
それが終わったら、BEのコードがデプロイされてから、起動されます。
最後にk8s containerの変換を設定して、そういう形でダウンタイムも少なくなると思うます。
もちろんk8sに構築するのも必要です
最後にGitHubのCI/CDのページで成功か失敗かチェックします
最初の構築するのが時間かかりますが、それができれば便利になります。